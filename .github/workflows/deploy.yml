name: Deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy'
        required: true
        default: 'main'

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.event.inputs.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Run tests
        run: pytest tests/ --maxfail=1 --disable-warnings -q

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    # needs: test
    strategy:
      matrix:
        service: [api, bot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        name: Generate image metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}:cache
          cache-to:   type=registry,ref=ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}:cache,mode=max

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Upload docker-compose
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: docker-compose.prod.yml
          target: "${{ secrets.SERVER_PROJECT_PATH }}/"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -euo pipefail
            cd "${{ secrets.SERVER_PROJECT_PATH }}"

            # Write bot env in place
            echo "BOT_TOKEN=${{ secrets.PROD_BOT_TOKEN }}" > bot/.env

            echo "Starting deployment script at $(date)"
            export PATH="$HOME/.local/bin:$PATH"

            # Enable linger mode and Podman socket
            echo "Enabling Podman linger mode for user"
            loginctl enable-linger "$USER"

            echo "Starting Podman socket..."
            systemctl --user start podman.socket || true
            systemctl --user status podman.socket || true

            # Ensure podman-compose is installed
            if ! command -v podman-compose &>/dev/null; then
              echo "Installing podman-compose..."
              pip install --user podman-compose
            fi

            # Clean stale locks
            echo "Removing stale CNI lock..."
            rm -f ~/.config/cni/net.d/cni.lock || true

            # Free port 8000
            echo "Killing processes on port 8000..."
            lsof -ti:8000 | xargs -r kill -9 || true

            echo "Waiting for port 8000 to become free..."
            for i in {1..10}; do
              if ! lsof -ti:8000 > /dev/null; then
                echo "Port 8000 is now free."
                break
              fi
              echo "Still in use, retrying ($i/10)..."
              sleep 1
            done

            # Set env vars for image tags
            export GITHUB_OWNER=${{ github.repository_owner }}
            export REF=$(echo "${{ github.sha }}" | cut -c1-7)
            echo "GITHUB_OWNER=$GITHUB_OWNER, REF=$REF"

            # Ensure external network
            if ! podman network exists pint_bot_default; then
              echo "Creating network pint_bot_default..."
              podman network create pint_bot_default
            else
              echo "Network pint_bot_default exists"
            fi

            # Patch incompatible CNI config
            CNI_FILE="$HOME/.config/cni/net.d/pint_bot_default.conflist"
            if [ -f "$CNI_FILE" ]; then
              if grep -q '"cniVersion": *"1.0.0"' "$CNI_FILE"; then
                echo "Patching CNI config version in $CNI_FILE..."
                sed -i 's/"cniVersion": *"1.0.0"/"cniVersion": "0.4.0"/' "$CNI_FILE"
              else
                echo "CNI config already uses a compatible version."
              fi
            else
              echo "CNI config file not found — skipping patch."
            fi

            # Attempt graceful shutdown
            echo "podman-compose down..."
            podman-compose -f docker-compose.prod.yml down || true

            # Extra container/pod cleanup
            echo "Forcibly removing containers and pods..."
            podman ps -a -q | tee /tmp/containers.txt | xargs -r podman rm -f || echo "No containers to remove"
            podman pod ps -q | tee /tmp/pods.txt | xargs -r podman pod rm -f || echo "No pods to remove"

            # Deep port check again
            echo "Double-checking port 8000..."
            for i in {1..10}; do
              CONTAINERS_USING_PORT=$(podman ps --format '{{.ID}}: {{.Ports}}' | grep '8000/tcp' || true)
              if [ -z "$CONTAINERS_USING_PORT" ]; then
                echo "No containers using port 8000"
                break
              fi
              echo "Still blocked: $CONTAINERS_USING_PORT"
              sleep 2
            done

            # Pull and deploy
            echo "Pulling latest images..."
            podman-compose -f docker-compose.prod.yml pull

            echo "Pruning unused images..."
            podman image prune -f || true

            # Cleaning up lingering container systemd units...
            echo "Cleaning up Podman user services and timers…"
            systemctl --user stop           podman*  '*.timer' '*.service' || true
            systemctl --user disable        podman*  '*.timer' '*.service' || true
            systemctl --user reset-failed   podman*  '*.timer' '*.service' || true

            echo "Reloading systemd user daemon to forget old units..."
            systemctl --user daemon-reexec || true
            systemctl --user daemon-reload || true

            systemctl --user list-units --type=service --all --no-pager | grep -E '^[a-f0-9]{64}\.service$' || echo "No lingering services"
            systemctl --user list-units --type=timer --all --no-pager | grep -E '^[a-f0-9]{64}\.timer$' || echo "No lingering timers"

            echo "Starting containers..."
            podman-compose -f docker-compose.prod.yml up -d

            # Check for container failures
            echo "Checking container exit statuses..."
            FAILED=0

            for container in pint_bot_api_1 pint_bot_bot_1; do
              EXIT_CODE=$(podman inspect "$container" --format '{{.State.ExitCode}}' || echo "999")
              echo "$container exit code: $EXIT_CODE"
              if [ "$EXIT_CODE" != "0" ]; then
                echo "$container failed with exit code $EXIT_CODE"
                FAILED=1
              fi
            done

            if [ "$FAILED" -ne 0 ]; then
              echo "One or more containers failed to start. Exiting with error."
              exit 1
            fi

            # Final status
            echo "Final status:"
            podman-compose -f docker-compose.prod.yml ps || true

            echo "Deployment finished at $(date)"