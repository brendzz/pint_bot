name: Build, Test & Deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy'
        required: true
        default: 'main'

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.event.inputs.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Run tests
        run: pytest tests/ --maxfail=1 --disable-warnings -q

  build-and-push:
    name: Build & Push to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api, bot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        name: Generate image metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push ${{ matrix.service }} image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/my-${{ matrix.service }}:cache,mode=max

  deploy:
    name: SSH & Deploy on Server
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code (to access compose + env files)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Upload docker-compose.prod.yml
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: docker-compose.prod.yml
          target: "${{ secrets.SERVER_PROJECT_PATH }}/"

      - name: Create bot/.env file
        run: |
          if [ -z "${{ secrets.PROD_BOT_TOKEN }}" ]; then
            echo "PROD_BOT_TOKEN secret is missing or empty."
            exit 1
          fi
          echo "BOT_TOKEN=${{ secrets.PROD_BOT_TOKEN }}" > bot.env
      
      - name: Upload bot.env
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: bot.env
          target: "${{ secrets.SERVER_PROJECT_PATH }}/bot/"
          strip_components: 1

      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -euo pipefail
            echo "üìÇ Listing bot directory contents:"
            ls -lR "${{ secrets.SERVER_PROJECT_PATH }}/bot"
      
            cd "${{ secrets.SERVER_PROJECT_PATH }}/bot"
            mv bot.env .env
      
            cd "${{ secrets.SERVER_PROJECT_PATH }}"
            export GITHUB_OWNER=${{ github.repository_owner }}
            export REF=${{ github.sha }}
      
            echo "üîÅ Pulling latest docker images..."
            docker-compose -f docker-compose.prod.yml pull
            echo "üöÄ Starting containers..."
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            echo "üßπ Pruning unused docker images..."
            docker image prune -f